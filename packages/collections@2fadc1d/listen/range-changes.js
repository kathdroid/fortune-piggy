"use strict";function RangeChanges(){throw Error("Can't construct. RangeChanges is a mixin.")}var WeakMap=require("weak-map"),Dict=require("../dict"),rangeChangeDescriptors=new WeakMap;module.exports=RangeChanges,RangeChanges.prototype.getAllRangeChangeDescriptors=function(){return rangeChangeDescriptors.has(this)||rangeChangeDescriptors.set(this,Dict()),rangeChangeDescriptors.get(this)},RangeChanges.prototype.getRangeChangeDescriptor=function(e){var t=this.getAllRangeChangeDescriptors();return e=e||"",t.has(e)||t.set(e,{isActive:!1,changeListeners:[],willChangeListeners:[]}),t.get(e)},RangeChanges.prototype.addRangeChangeListener=function(e,t,n){!this.isObservable&&this.makeObservable&&this.makeObservable();var r,i=this.getRangeChangeDescriptor(t);r=n?i.willChangeListeners:i.changeListeners,r.push(e),Object.defineProperty(this,"dispatchesRangeChanges",{value:!0,writable:!0,configurable:!0,enumerable:!1});var a=this;return function(){a&&(a.removeRangeChangeListener(e,t,n),a=null)}},RangeChanges.prototype.removeRangeChangeListener=function(e,t,n){var r,i=this.getRangeChangeDescriptor(t);r=n?i.willChangeListeners:i.changeListeners;var a=r.lastIndexOf(e);if(-1===a)throw Error("Can't remove range change listener: does not exist: token "+JSON.stringify(t));r.splice(a,1)},RangeChanges.prototype.dispatchRangeChange=function(e,t,n,r){var i=this.getAllRangeChangeDescriptors(),a="Range"+(r?"WillChange":"Change");i.forEach(function(i,s){if(!i.isActive){i.isActive=!0;var o;o=r?i.willChangeListeners:i.changeListeners;var l="handle"+(s.slice(0,1).toUpperCase()+s.slice(1))+a;try{o.slice().forEach(function(i){if(!(0>o.indexOf(i)))if(i[l])i[l](e,t,n,this,r);else{if(!i.call)throw Error("Handler "+i+" has no method "+l+" and is not callable");i.call(this,e,t,n,this,r)}},this)}finally{i.isActive=!1}}},this)},RangeChanges.prototype.addBeforeRangeChangeListener=function(e,t){return this.addRangeChangeListener(e,t,!0)},RangeChanges.prototype.removeBeforeRangeChangeListener=function(e,t){return this.removeRangeChangeListener(e,t,!0)},RangeChanges.prototype.dispatchBeforeRangeChange=function(e,t,n){return this.dispatchRangeChange(e,t,n,!0)};